/* Colour Pallete */

:root {
    --color-primary: #2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body: #918ca4;
    --color-border: #ccc;
    --border-radius: 30px;
}

*,
*::after,
*::before {
    box-sizing: border-box;
}

/* Typography */

html {
    font-size: 62.5%;
    /* 62.5 * 16 = 10px */
}

body {
    font-family: Inter, Arial, Helvetica, sans-serif;
    color: var(--color-body);
    line-height: 1.5;
    font-size: 2.4rem;
}

h1,
h2,
h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
    /*
    - Our font i.e. Inter by default has some space on top and bottom of our text.
    - So, we need to reduce the bottom margin from 2rem to 1rem to match the space with the design mockup.
    */
}

h1 {
    font-size: 7rem;
}

h2 {
    font-size: 4rem;
}

h3 {
    font-size: 3rem;
}

p {
    margin-top: 0;
    /*
    - The top-margin of p element and bottom-margin of h3 element was collapsing to 24px.
    - So, we set the margin-top for p element to be 0 and let the margin-down of h3 element decide the margin-top of p element.
    */
}

@media screen and (min-width: 1024px) {
    body {
        font-size: 1.8rem;
    }
    h1 {
        font-size: 8rem;
    }

    h2 {
        font-size: 4rem;
    }

    h3 {
        font-size: 2.4rem;
    }
}
/*
- 1024px is the standard breakpoint for the desktop screens.
*/

/* Links */

a {
    text-decoration: none;
}

.link-arrow {
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
}

.link-arrow::after {
    content: "-->";
    margin-left: 5px;
    /* We are using px here because no matter what is the size of the font we only want a small space between the link and the arrow. */

    transition: margin 0.4s;
}

.link-arrow:hover::after {
    margin-left: 10px;
}
/* Using this we are targeting the after element (that we inserted dynamically) in hover state. */

@media screen and (min-width: 1024px) {
    .link-arrow {
        font-size: 1.5rem;
    }
}

/* Badges */

.badge {
    border-radius: 20px;
    font-size: 2rem;
    font-weight: 600;
    padding: 0.5rem 2rem;
    white-space: nowrap;
    /*
    - This property prevents the badge from wrapping in a card when there is small space left for the badge to fit in.
    */
}

.badge--primary {
    background: var(--color-primary);
    color: white;
}

.badge--secondary {
    background: var(--color-secondary);
    color: white;
}

.badge--small {
    font-size: 1.6rem;
}

@media screen and (min-width: 1024px) {
    .badge {
        font-size: 1.5rem;
    }

    .badge--small {
        font-size: 1.2rem;
    }
}

/* Lists */

.list {
    list-style: none;
    padding-left: 0;
    color: var(--color-headings);
}

.list--inline .list__item {
    display: inline-block;
    margin-right: 2rem;
}

.list--tick {
    list-style-image: url(../Images/tick.svg);
    padding-left: 3rem;
}

.list--tick .list__item {
    padding-left: 1rem;
    margin-bottom: 1.5rem;
}

@media screen and (min-width: 1024px) {
    .list--tick .list__item {
        padding-left: 0.5rem;
    }
}

/* Icons */

.icon {
    height: 40px;
    width: 40px;
}

.icon--primary {
    fill: var(--color-primary);
    /* fill property only applies to svg  images. */
}
/* Similarly, we can create different classes for different colours of icons but since we do not need them right now we should not make them. */

.icon-container {
    align-items: center;
    background: #f3f9fa;
    border-radius: 50%;
    display: inline-flex;
    /*
    - We do not want to set the display to block because in that case the element coming next to the icon will be on new line but we do not want it.
    - And we want it to be inline-block so that height and width properties are applicable.
    - But we want to align itin center.
    - So, we use inline-flex.
    */

    height: 64px;
    justify-content: center;
    width: 64px;
}
/*
- We have used a single dash to separate these words because this is not a modifier for the icon class.
- It is an entirely new class and we use single dash to separate different words in BEM. 
*/

/* Buttons */

.btn {
    border-radius: 5rem;
    border: 0;
    cursor: pointer;
    /* To make the cursor change to pointer when we hover on it to make them look clickable. */

    font-size: 1.8rem;
    font-weight: 600;
    margin: 1rem 0;
    padding: 2rem 3rem;
    text-align: center;
    text-transform: uppercase;
    white-space: nowrap;

    /* box-sizing for button element is by default set to border-box but for anchor element we have to set it manually. */
}

.btn--heading {
    background: var(--color-headings);
    color: white;
}

.btn--heading:hover {
    background: #502cd4;
}

.btn--secondary {
    background: var(--color-secondary);
    color: white;
}

.btn--secondary:hover {
    background: #00c8eb;
}

.btn--accent {
    background: var(--color-accent);
    color: white;
}

.btn--accent:hover {
    background: #ec3000;
}

.btn--block {
    width: 100%;
    display: inline-block;
    /* For anchor elements, we have to set it to inline-block because they are inline elements and width property does not apply to them. */
}

.btn--outline {
    background: none;
    border: 2px solid var(--color-headings);
    color: var(--color-headings);
}

.btn--outline:hover {
    background: var(--color-headings);
    color: white;
}

@media screen and (min-width: 1024px) {
    .btn {
        font-size: 1.5rem;
    }
}

/* Inputs */

.input {
    border-radius: var(--border-radius);
    border: 1px solid var(--color-border);
    color: var(--color-headings);
    font-size: 2rem;
    outline: 0;
    padding: 1.5rem 3.5rem;
}

::placeholder {
    /* This is a pseudo-element selector to select placeholder of the input element. */
    color: #cdcbd7;
}

.input-group {
    border-radius: var(--border-radius);
    border: 1px solid var(--color-border);
    display: flex;
}

.input-group .input {
    border: 0;
    flex-grow: 1;
    padding: 1.5rem 1rem;
}
/* All the input fields inside the input-group should not have a border. */

.input-group .btn {
    margin: 4px;
}

@media screen and (min-width: 1024px) {
    .input {
        font-size: 1.5rem;
    }
}
